 describe("availableMoves", () => {
    it("should return available moves for unmoved white pawn", () => {
      const game = new Game();
      const pawn = new Pawn("white", "A", 2);
      const moves = pawn.availableMoves(game);
      const expectedMoves = [new Position("A", 3), new Position("A", 4)];
      expect(moves.length).toBe(2);
      expectedMoves.forEach((move) => {
        expect(moves).toContainEqual(move);
      });
    });
    it("should return available moves for a black pawn ", () => {
      const game = new Game();
      game.makeMove(new Position("A", 2), new Position("A", 4));
      const pawn = new Pawn("black", "A", 7);
      const moves = pawn.availableMoves(game);
      const expectedMoves = [new Position("A", 6), new Position("A", 5)];
      expect(moves.length).toBe(2);
      expectedMoves.forEach((move) => {
        expect(moves).toContainEqual(move);
      });
    });
    it("should return available moves for en Passant", () => {
      const game = new Game();
      game.makeMove(new Position("A", 2), new Position("A", 4));
      game.makeMove(new Position("H", 7), new Position("H", 6));
      game.makeMove(new Position("A", 4), new Position("A", 5));
      game.makeMove(new Position("B", 7), new Position("B", 5));
      const pawn = new Pawn("white", "A", 5);
      const expectedMoves = [new Position("B", 6), new Position("A", 6)];
      const moves = pawn.availableMoves(game);
      expect(moves.length).toBe(2);
      expectedMoves.forEach((move) => {
        expect(moves).toContainEqual(move);
      });
    });
    it("should return available moves when a pawn can capture", () => {
      const game = new Game();
      game.makeMove(new Position("A", 2), new Position("A", 4));
      game.makeMove(new Position("B", 7), new Position("B", 5));
      const pawn = new Pawn("white", "A", 4);
      const moves = pawn.availableMoves(game);
      const expectedMoves = [new Position("A", 5), new Position("B", 5)];
      expect(moves.length).toBe(2);
      expectedMoves.forEach((move) => {
        expect(moves).toContainEqual(move);
      });
    });
  });
  describe("en Passant", () => {
    it("white piece should be able to take en Passant", () => {
      const game = new Game();
      game.makeMove(new Position("A", 2), new Position("A", 4));
      game.makeMove(new Position("H", 7), new Position("H", 6));
      game.makeMove(new Position("A", 4), new Position("A", 5));
      game.makeMove(new Position("B", 7), new Position("B", 5));
      const pawn = new Pawn("white", "A", 5);
      expect(pawn.canMoveTo(new Position("B", 6), game)).toBe(true);
      game.makeMove(new Position("A", 5), new Position("B", 6));
      expect(game.getPieceFromPosition(new Position("B", 5))).toBeNull();
    });
    it("black piece should be able to take en Passant", () => {
      const game = new Game();
      game.makeMove(new Position("A", 2), new Position("A", 4));
      game.makeMove(new Position("H", 7), new Position("H", 5));
      game.makeMove(new Position("A", 4), new Position("A", 5));
      game.makeMove(new Position("H", 5), new Position("H", 4));
      game.makeMove(new Position("G", 2), new Position("G", 4));
      const pawn = new Pawn("black", "H", 4);
      expect(pawn.canMoveTo(new Position("G", 3), game)).toBe(true);
      game.makeMove(new Position("H", 4), new Position("G", 3));
      expect(game.getPieceFromPosition(new Position("G", 4))).toBeNull();
    });
  });

 describe("availableMoves", () => {
    it("should return available moves for rook", () => {
      const game = new Game();
      game.makeMove(new Position("A", 2), new Position("A", 4));
      game.makeMove(new Position("H", 7), new Position("H", 6));
      game.makeMove(new Position("A", 4), new Position("A", 5));
      game.makeMove(new Position("G", 7), new Position("G", 6));
      game.makeMove(new Position("A", 1), new Position("A", 4));
      game.makeMove(new Position("F", 7), new Position("F", 6));
      game.makeMove(new Position("A", 4), new Position("D", 4));
      game.makeMove(new Position("A", 7), new Position("A", 6));
      const rook = new Rook("white", "D", 4);
      const moves = rook.availableMoves(game);
      const expectedMoves = [
        new Position("D", 3),
        new Position("D", 5),
        new Position("D", 6),
        new Position("D", 7),
        new Position("A", 4),
        new Position("B", 4),
        new Position("C", 4),
        new Position("E", 4),
        new Position("F", 4),
        new Position("G", 4),
        new Position("H", 4),
      ];
      expect(moves.length).toBe(11);
      expectedMoves.forEach((move) => {
        expect(moves).toContainEqual(move);
      });
    });
  });
  it("should return available moves when a rook can capture", () => {
    const game = new Game();
    game.makeMove(new Position("A", 2), new Position("A", 4));
  });
BISHOP

  describe("availableMoves", () => {
    it("should return available moves", () => {
      const game = new Game();
      game.makeMove(new Position("D", 2), new Position("D", 3));
      game.makeMove(new Position("H", 7), new Position("H", 6));
      game.makeMove(new Position("C", 1), new Position("E", 3));
      game.makeMove(new Position("H", 6), new Position("H", 5));
      const bishop = new Bishop("white", "E", 3);
      const moves = bishop.availableMoves(game);
      const expectedMoves = [
        new Position("C", 1),
        new Position("D", 2),
        new Position("F", 4),
        new Position("G", 5),
        new Position("H", 6),
        new Position("D", 4),
        new Position("C", 5),
        new Position("B", 6),
        new Position("A", 7),
      ];
      expect(moves.length).toBe(9);
      moves.forEach((move) => {
        expect(expectedMoves).toContainEqual(move);
      });
    });
  });

  QUeen
  describe("availableMoves", () => {
    const game = new Game();
    game.makeMove(new Position("E", 2), new Position("E", 3));
    game.makeMove(new Position("A", 7), new Position("A", 6));
    game.makeMove(new Position("D", 1), new Position("G", 4));
    game.makeMove(new Position("G", 7), new Position("G", 6));
    const moves = new Queen("white", "G", 4).availableMoves(game);
    const expectedMoves = [
      { file: "A", rank: 4 },
      { file: "B", rank: 4 },
      { file: "C", rank: 4 },
      { file: "D", rank: 1 },
      { file: "D", rank: 4 },
      { file: "D", rank: 7 },
      { file: "E", rank: 2 },
      { file: "E", rank: 4 },
      { file: "E", rank: 6 },
      { file: "F", rank: 3 },
      { file: "F", rank: 4 },
      { file: "F", rank: 5 },
      { file: "G", rank: 3 },
      { file: "G", rank: 5 },
      { file: "G", rank: 6 },
      { file: "H", rank: 3 },
      { file: "H", rank: 4 },
      { file: "H", rank: 5 },
    ];
    expect(moves.length).toBe(expectedMoves.length);
    moves.forEach((move) => {
      expect(expectedMoves).toContainEqual(move);
    });
  });


GAME

it("should change move colour after a move is made", () => {
    const game = new Game();
    game.makeMove(new Position("A", 2), new Position("A", 4));
    expect(game.turnColor).toBe("black");
  });
  it("should increase turn number after a pair of moves", () => {
    const game = new Game();
    game.makeMove(new Position("A", 2), new Position("A", 4));
    game.makeMove(new Position("A", 7), new Position("A", 5));
    expect(game.turnNumber).toBe(2);
  });
  test("Piece should move to new position on the board", () => {
    const game = new Game();
    const a2Pawn = game.state[1][0];
    game.makeMove(new Position("A", 2), new Position("A", 4));
    expect(a2Pawn?.currentPosition).toEqual(new Position("A", 4));
    expect(game.state[1][0]).toBeNull();
  });
  test("update last move after a move is taken", () => {
    const game = new Game();
    game.makeMove(new Position("A", 2), new Position("A", 4));
    expect(game.moves.previousMove).toEqual([
      new Position("A", 2),
      new Position("A", 4),
    ]);
    game.makeMove(new Position("A", 7), new Position("A", 5));
    expect(game.moves.previousMove).toEqual([
      new Position("A", 7),
      new Position("A", 5),
    ]);
  });