 


  it("should return available moves when a rook can capture", () => {
    const game = new Game();
    game.makeMove(new Position("A", 2), new Position("A", 4));
  });
  QUeen
  describe("possibleMoves", () => {
    const game = new Game();
    game.makeMove(new Position("E", 2), new Position("E", 3));
    game.makeMove(new Position("A", 7), new Position("A", 6));
    game.makeMove(new Position("D", 1), new Position("G", 4));
    game.makeMove(new Position("G", 7), new Position("G", 6));
    const moves = new Queen("white", "G", 4).possibleMoves(game);
    const expectedMoves = [
      { file: "A", rank: 4 },
      { file: "B", rank: 4 },
      { file: "C", rank: 4 },
      { file: "D", rank: 1 },
      { file: "D", rank: 4 },
      { file: "D", rank: 7 },
      { file: "E", rank: 2 },
      { file: "E", rank: 4 },
      { file: "E", rank: 6 },
      { file: "F", rank: 3 },
      { file: "F", rank: 4 },
      { file: "F", rank: 5 },
      { file: "G", rank: 3 },
      { file: "G", rank: 5 },
      { file: "G", rank: 6 },
      { file: "H", rank: 3 },
      { file: "H", rank: 4 },
      { file: "H", rank: 5 },
    ];
    expect(moves.length).toBe(expectedMoves.length);
    moves.forEach((move) => {
      expect(expectedMoves).toContainEqual(move);
    });
  });

